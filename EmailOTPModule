using System;
using System.Net.Mail;
using System.Threading.Tasks;

namespace EmailOTPModule
{
    public class EmailOTPModule
    {
        private string currentOTP;
        private bool isOtpExpired = false;
        private int attempts = 0;

        private const int OTPValidityDuration = 60000; // 1 minute in milliseconds

        // Status codes
        public const string STATUS_EMAIL_OK = "email containing OTP has been sent successfully.";
        public const string STATUS_EMAIL_FAIL = "email address does not exist or sending to the email has failed.";
        public const string STATUS_EMAIL_INVALID = "email address is invalid.";

        public const string STATUS_OTP_OK = "OTP is valid and checked";
        public const string STATUS_OTP_FAIL = "OTP is wrong after 10 tries";
        public const string STATUS_OTP_TIMEOUT = "timeout after 1 min";

        public void start()
        {
        }

        public void close()
        {
            //Disposing object
            currentOTP = null;
        }

        //generating OTP and send email
        public string generate_OTP_email(string user_email)
        {
            // checking if entered email is valid or not
            if (!IsValidEmail(user_email) || !user_email.EndsWith("@dso.org.sg"))
            {
                return STATUS_EMAIL_INVALID;
            }

            currentOTP = GenerateOTP(); // generating random 6 digit OTP
            string emailBody = $"Your OTP Code is {currentOTP}. The code is valid for 1 minute.";

            bool emailSent = send_email(user_email, emailBody);
            if (emailSent)
            {
                StartOtpTimer(); // Start the timer for OTP expiration.
                return STATUS_EMAIL_OK;
            }
            else
            {
                return STATUS_EMAIL_FAIL;
            }
        }

        // check OTP entered is correct
        public string check_OTP(IOSTREAM input)
        {
            //Check maximum 10 times for correct OTP
            while (attempts < 10)
            {
                //Check OTP is expired or not (expiration time is 1 minute)
                if (isOtpExpired)
                {
                    return STATUS_OTP_TIMEOUT;
                }

                Console.Write("Enter OTP: ");
                string enteredOTP = input.readOTP();

                if (enteredOTP == currentOTP)
                {
                    return STATUS_OTP_OK;
                }
                attempts++;
            }

            return STATUS_OTP_FAIL;
        }

        //check the entered email is valid or not
        private bool IsValidEmail(string email)
        {
            try
            {
                var mailAddress = new MailAddress(email);
                return true;
            }
            catch (FormatException)
            {
                return false;
            }
        }

        //Generates random new 6 digit OTP
        private string GenerateOTP()
        {
            var random = new Random();
            return random.Next(100000, 999999).ToString(); // generating 6 digit random number
        }

        //Start timer to check OTP is only valid for 1 minute
        private async void StartOtpTimer()
        {
            isOtpExpired = false;
            await Task.Delay(OTPValidityDuration); // Wait for 1 minute.
            isOtpExpired = true;
        }

        //Send email with OTP
        private bool send_email(string emailAddress, string emailBody)
        {
            Console.WriteLine($"Sending email to {emailAddress}: {emailBody}");
            return true;
        }
    }

    public class IOSTREAM
    {
        public string readOTP()
        {
            return Console.ReadLine();
        }
    }

    public class Program
    {  
        static void Main(string[] args)
        {
            EmailOTPModule otpModule = new EmailOTPModule();
            IOSTREAM inputStream = new IOSTREAM();
            otpModule.start();
    
            Console.Write("Enter your email: ");
            string userEmail = Console.ReadLine();
    
            string emailStatus = otpModule.generate_OTP_email(userEmail);
            Console.WriteLine($"Email Status: {emailStatus}");
    
            if (emailStatus == EmailOTPModule.STATUS_EMAIL_OK)
            {
                string otpStatus = otpModule.check_OTP(inputStream);
                Console.WriteLine($"OTP Status: {otpStatus}");
                Console.ReadLine();
            }
            else
            {
                Console.ReadLine();
            }
    
            otpModule.close();
        }
    }
}
